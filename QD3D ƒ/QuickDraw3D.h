/* #Includes */#include <QD3D.h>#include <QD3DAcceleration.h>#include <QD3DCamera.h>#include <QD3DController.h>#include <QD3DDrawContext.h>#include <QD3DErrors.h>#include <QD3DGeometry.h>#include <QD3DGroup.h>#include <QD3DIO.h>#include <QD3DLight.h>#include <QD3DMath.h>#include <QD3DPick.h>#include <QD3DRenderer.h>#include <QD3DSet.h>#include <QD3DShader.h>#include <QD3DStorage.h>#include <QD3DString.h>#include <QD3DStyle.h>#include <QD3DTransform.h>/* Type Declarations */struct CameraParams{	TQ3Point3D	cameraFrom;	TQ3Point3D	cameraTo;	TQ3Vector3D	cameraUp;	TQ3Point2D	origin;	float 		hither;	float		yon;	float		height;	float		width;	float		fov;};typedef struct CameraParams CameraParams;struct AmbientLightParams{	TQ3ColorRGB	color;	float		brightness;};typedef struct AmbientLightParams AmbientLightParams;struct DirectionalLightParams{	TQ3ColorRGB	color;	TQ3Boolean	castsShadows;	TQ3Vector3D	direction;	float		brightness;};typedef struct DirectionalLightParams DirectionalLightParams;struct StyleParams{	TQ3InterpolationStyle	interpolationStyle;	TQ3BackfacingStyle		backfacingStyle;	TQ3FillStyle			fillStyle;	TQ3ObjectType			shaderType;};typedef struct StyleParams StyleParams;struct BoxParams{	TQ3ColorRGB	color;	TQ3Point3D	origin;	TQ3Vector3D	orientation;	TQ3Vector3D	majorAxis;	TQ3Vector3D	minorAxis;	float		ambient;};typedef struct BoxParams BoxParams;/* Function Prototypes */TQ3Status CreateView(WindowPtr theWindow, TQ3DrawContextObject *theDrawContext, TQ3ViewObject *theView);TQ3Status CreateCamera(CameraParams theParams, TQ3DrawContextObject theDrawContext, TQ3CameraObject *theCamera);TQ3Status CreateAmbientLight(AmbientLightParams theParams, TQ3LightObject *theLight);TQ3Status CreateDirectionalLight(DirectionalLightParams theParams, TQ3LightObject *theLight);TQ3Status CreateStyles(StyleParams theParams, TQ3StyleObject *theInterpolation, TQ3StyleObject *theBackfacing, TQ3StyleObject *theFill, TQ3ShaderObject *theShader);TQ3Status CreateBox(BoxParams theParams, TQ3GeometryObject *theBox);TQ3Status CloseQD3D(void);void SetPoint2D(TQ3Point2D *thePoint, float x, float y);void SetPoint3D(TQ3Point3D *thePoint, float x, float y, float z);void SetVector2D(TQ3Vector2D *theVector, float x, float y);void SetVector3D(TQ3Vector3D *theVector, float x, float y, float z);void SetColorRGB(TQ3ColorRGB *theColor, float r, float g, float b);void SetColorARGB(TQ3ColorARGB *theColor, float a, float r, float g, float b);TQ3Status CreateView(WindowPtr theWindow, TQ3DrawContextObject *theDrawContext, TQ3ViewObject *theView){	TQ3Status				status;	TQ3DrawContextData		theDrawContextData;	TQ3MacDrawContextData	theMacDrawContextData;	TQ3ColorARGB			clearColor={1.0, 0.0, 0.0, 0.0};	TQ3RendererObject		theRenderer;		if(Q3IsInitialized()==kQ3False)	{		status=Q3Initialize();		if(status==kQ3Failure)			return status;	}		*theView=Q3View_New();	if(*theView==nil)		return kQ3Failure;			theDrawContextData.clearImageMethod=kQ3ClearMethodWithColor;	theDrawContextData.clearImageColor=clearColor;	theDrawContextData.pane.min.x=(theWindow->portRect).left;	theDrawContextData.pane.max.x=(theWindow->portRect).right;	theDrawContextData.pane.min.y=(theWindow->portRect).top;	theDrawContextData.pane.max.y=(theWindow->portRect).bottom;	theDrawContextData.paneState=kQ3True;	theDrawContextData.maskState=kQ3False;	theDrawContextData.doubleBufferState=kQ3True;		theMacDrawContextData.drawContextData=theDrawContextData;	theMacDrawContextData.window=(CWindowPtr)theWindow;	theMacDrawContextData.library=kQ3Mac2DLibraryNone;	theMacDrawContextData.viewPort=nil;	theMacDrawContextData.grafPort=nil;		*theDrawContext=Q3MacDrawContext_New(&theMacDrawContextData);	if(*theDrawContext==nil)		return kQ3Failure;			status=Q3View_SetDrawContext(*theView, *theDrawContext);	if(status==kQ3Failure)		return status;				theRenderer=Q3Renderer_NewFromType(kQ3RendererTypeInteractive);	if(theRenderer==nil)		return kQ3Failure;			status=Q3View_SetRenderer(*theView, theRenderer);	if(status==kQ3Failure)		return status;		return kQ3Success;}	TQ3Status CreateCamera(CameraParams theParams, TQ3DrawContextObject theDrawContext, TQ3CameraObject *theCamera){		TQ3Status						status;	TQ3CameraData					theCameraData;	TQ3ViewAngleAspectCameraData	theViewAngleCameraData;	TQ3Area							pane;		if(Q3IsInitialized()==kQ3False)	{		status=Q3Initialize();		if(status==kQ3Failure)			return status;	}		theCameraData.placement.cameraLocation=theParams.cameraFrom;	theCameraData.placement.pointOfInterest=theParams.cameraTo;	theCameraData.placement.upVector=theParams.cameraUp;	theCameraData.range.hither=theParams.hither;	theCameraData.range.yon=theParams.yon;	theCameraData.viewPort.origin=theParams.origin;	theCameraData.viewPort.width=theParams.width;	theCameraData.viewPort.height=theParams.height;	theViewAngleCameraData.cameraData=theCameraData;	theViewAngleCameraData.fov=theParams.fov;	Q3DrawContext_GetPane(theDrawContext, &pane);	theViewAngleCameraData.aspectRatioXToY=((pane.max.x-pane.min.x)/(pane.max.y-pane.min.y));		*theCamera=Q3ViewAngleAspectCamera_New(&theViewAngleCameraData);	if(*theCamera==nil)		return kQ3Failure;			return kQ3Success;}TQ3Status CreateAmbientLight(AmbientLightParams theParams, TQ3LightObject *theLight){	TQ3LightData	theLightData;	TQ3Status		status;		if(Q3IsInitialized()==kQ3False)	{		status=Q3Initialize();		if(status==kQ3Failure)			return status;	}		theLightData.isOn=kQ3True;	theLightData.color=theParams.color;	theLightData.brightness=theParams.brightness;		*theLight=Q3AmbientLight_New(&theLightData);	if(*theLight==nil)		return kQ3Failure;			return kQ3Success;}TQ3Status CreateDirectionalLight(DirectionalLightParams theParams, TQ3LightObject *theLight){	TQ3DirectionalLightData	theLightData;	TQ3Status				status;		if(Q3IsInitialized()==kQ3False)	{		status=Q3Initialize();		if(status==kQ3Failure)			return status;	}		theLightData.lightData.isOn=kQ3True;	theLightData.lightData.color=theParams.color;	theLightData.lightData.brightness=theParams.brightness;	theLightData.castsShadows=theParams.castsShadows;	theLightData.direction=theParams.direction;		*theLight=Q3DirectionalLight_New(&theLightData);	if(*theLight==nil)		return kQ3Failure;			return kQ3Success;}TQ3Status CreateStyles(StyleParams theParams, TQ3StyleObject *theInterpolation, TQ3StyleObject *theBackfacing, TQ3StyleObject *theFill, TQ3ShaderObject *theShader){	TQ3Status	status;		if(Q3IsInitialized()==kQ3False)	{		status=Q3Initialize();		if(status==kQ3Failure)			return status;	}		*theInterpolation=Q3InterpolationStyle_New(theParams.interpolationStyle);	if(*theInterpolation==nil)		return kQ3Failure;			*theBackfacing=Q3BackfacingStyle_New(theParams.backfacingStyle);	if(*theBackfacing==nil)		return kQ3Failure;			*theFill=Q3FillStyle_New(theParams.fillStyle);	if(*theFill==nil)		return kQ3Failure;			switch(theParams.shaderType)	{		case kQ3IlluminationTypeLambert:			*theShader=Q3LambertIllumination_New();		break;		case kQ3IlluminationTypePhong:			*theShader=Q3PhongIllumination_New();		break;		case kQ3IlluminationTypeNULL:			*theShader=Q3NULLIllumination_New();		break;		default:			return kQ3Failure;		break;	}	if(*theShader==nil)		return kQ3Failure;			return kQ3Success;}TQ3Status CreateBox(BoxParams theParams, TQ3GeometryObject *theBox){	TQ3AttributeSet	theAttribs;	TQ3BoxData		theBoxData;	TQ3Status		status;		if(Q3IsInitialized()==kQ3False)	{		status=Q3Initialize();		if(status==kQ3Failure)			return status;	}		theAttribs=Q3AttributeSet_New();	if(theAttribs==nil)		return kQ3Failure;			status=Q3AttributeSet_Add(theAttribs, kQ3AttributeTypeDiffuseColor, &(theParams.color));	if(status==kQ3Failure)		return status;			status=Q3AttributeSet_Add(theAttribs, kQ3AttributeTypeAmbientCoefficient, &(theParams.ambient));	if(status==kQ3Failure)		return status;			theBoxData.origin=theParams.origin;	theBoxData.orientation=theParams.orientation;	theBoxData.majorAxis=theParams.majorAxis;	theBoxData.minorAxis=theParams.minorAxis;	theBoxData.faceAttributeSet=nil;	theBoxData.boxAttributeSet=theAttribs;		*theBox=Q3Box_New(&theBoxData);	if(*theBox==nil)		return kQ3Failure;			Q3Object_Dispose(theAttribs);		return kQ3Success;}TQ3Status CloseQD3D(void){	return Q3Exit();}void SetPoint2D(TQ3Point2D *thePoint, float x, float y){	thePoint->x=x;	thePoint->y=y;}void SetPoint3D(TQ3Point3D *thePoint, float x, float y, float z){	thePoint->x=x;	thePoint->y=y;	thePoint->z=z;}void SetVector2D(TQ3Vector2D *theVector, float x, float y){	theVector->x=x;	theVector->y=y;}void SetVector3D(TQ3Vector3D *theVector, float x, float y, float z){	theVector->x=x;	theVector->y=y;	theVector->z=z;}void SetColorRGB(TQ3ColorRGB *theColor, float r, float g, float b){	theColor->r=r;	theColor->g=g;	theColor->b=b;}void SetColorARGB(TQ3ColorARGB *theColor, float a, float r, float g, float b){	theColor->a=a;	theColor->r=r;	theColor->g=g;	theColor->b=b;}