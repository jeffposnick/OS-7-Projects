/* #Pragma */#pragma options align=mac68k/* #Includes */#include <AppleEvents.h>#include <Gestalt.h>#include "StandardGetFolder.h"/* Globals */AEEventHandlerUPP	OAPPHandlerUPP, ODOCHandlerUPP, PDOCHandlerUPP, QUITHandlerUPP;/* #Defines */#define kMoveToFront	(WindowPtr)-1L#define kGestaltMask	1L#define kCreator		'drNe'#define kTextType		'TEXT'#define kClipType		'clpt'#define kNewClipType	'clpT'#define kURLType		'URL '#define kMaxNumFSSpecs	25#define kEmptyString	"\p"/* Prototypes */void ToolboxInit(void);OSErr GotRequiredParams(AppleEvent *appleEventPtr);Boolean IsFolder(FSSpec theSpec);void DoError(Str255 err, long errNum, int errLoc);void Quit(Boolean fatal);void ToolboxInit(void){	InitGraf(&qd.thePort);	InitFonts();	InitWindows();	InitMenus();	TEInit();	InitDialogs(0L);	FlushEvents(everyEvent, 0);	InitCursor();	MaxApplZone();}/* Makes sure the AppleEvent parameters are OK */OSErr GotRequiredParams(AppleEvent *appleEventPtr){	/* Local Variables */	DescType	returnedType;	Size		actualSize;	OSErr		err;		err=AEGetAttributePtr(appleEventPtr, keyMissedKeywordAttr, typeWildCard, &returnedType, nil, 0, &actualSize);	if(err==errAEDescNotFound)		return noErr;	else		return err;}/* Returns true if theSpec is a folder */Boolean IsFolder(FSSpec theSpec){	/* Local Variables */	OSErr	err;	Boolean	junk, folder;	err=ResolveAliasFile(&theSpec, false, &folder, &junk);		return folder;}/* Shows a dialog and quits when a fatal event occurs */void DoError(Str255 err, long errNum, int errLoc){	/* Local Variables */	Str255	errNumStr, errLocStr;		NumToString(errNum, errNumStr);	NumToString((long)errLoc, errLocStr);		ParamText(err, errNumStr, errLocStr, "\p");		StopAlert(kFatalAlertID, nil);		Quit(true);}/* Quits cleanly */void Quit(Boolean problem){	/* Local Variables */	OSErr	err;		if(problem)	{		err=AERemoveEventHandler(kCoreEventClass, kAEOpenApplication, nil, false);		err=AERemoveEventHandler(kCoreEventClass, kAEOpenDocuments, nil, false);		err=AERemoveEventHandler(kCoreEventClass, kAEPrintDocuments, nil, false);		err=AERemoveEventHandler(kCoreEventClass, kAEQuitApplication, nil, false);		ExitToShell();	}	else	{		gDone=true;		err=AERemoveEventHandler(kCoreEventClass, kAEOpenApplication, nil, false);		err=AERemoveEventHandler(kCoreEventClass, kAEOpenDocuments, nil, false);		err=AERemoveEventHandler(kCoreEventClass, kAEPrintDocuments, nil, false);		err=AERemoveEventHandler(kCoreEventClass, kAEQuitApplication, nil, false);	}}